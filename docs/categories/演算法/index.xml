<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>演算法 on Coding Grassland</title>
    <link>http://localhost:1313/categories/%E6%BC%94%E7%AE%97%E6%B3%95/</link>
    <description>Recent content in 演算法 on Coding Grassland</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <copyright>Hailey</copyright>
    <lastBuildDate>Mon, 26 Feb 2024 00:00:00 +0000</lastBuildDate>
    <atom:link href="http://localhost:1313/categories/%E6%BC%94%E7%AE%97%E6%B3%95/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>資料結構及演算法學習筆記</title>
      <link>http://localhost:1313/posts/algorithm-note/</link>
      <pubDate>Mon, 26 Feb 2024 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/posts/algorithm-note/</guid>
      <description>[TOC]&#xA;演算法是什麼 {待補}&#xA;Chatgpt提供的學習計劃 第一階段：建立基礎 基本概念 學習演算法和資料結構的基本概念，例如陣列、鏈表、堆疊、佇列等。 時間複雜度和空間複雜度 理解演算法的時間複雜度和空間複雜度，並學習如何評估演算法的效能。 排序演算法 學習常見的排序演算法，如冒泡排序、插入排序、選擇排序、快速排序、合併排序等。 搜尋演算法 瞭解搜尋演算法，包括線性搜尋和二分搜尋。 第二階段：擴展知識 圖論 學習圖論相關的基本概念，如圖、路徑、迴路、最短路徑等，以及常見的圖論演算法，如深度優先搜索（DFS）和廣度優先搜索（BFS）。 動態規劃 瞭解動態規劃的基本原理和應用場景，並學習如何設計動態規劃演算法解決問題。 貪婪演算法 學習貪婪演算法的基本原理和常見應用，以及貪婪演算法與動態規劃的區別和適用場景。 第三階段：實際應用 演算法問題練習&#xA;解決各種演算法問題，可以通過線上資源如 LeetCode、HackerRank、Codewars 等網站來進行練習。 專案應用&#xA;在你的 ASP.NET Core 專案中實際應用所學的演算法知識，優化程式碼效能，處理複雜的邏輯問題。 演算法介紹 Two Pointer 其他待整理key word 資料結構 電腦區分兩種方法： 大塊：Array 小塊：Linked List 連結數量 一個連一個&amp;mdash;&amp;gt;Linked List(鏈結串列) 一個連兩個&amp;mdash;&amp;gt;Binary tree(二元樹) 一個連多個&amp;mdash;&amp;gt;B-Tree 或 B+ Tree(多元樹) 存放位置 通常存放在記憶體：Linked List、Binary tree 通常存放在硬碟：B-Tree Hash Table(雜湊表)：&#xA;混合大塊和小塊的結構，也就是rray當大容器，每一格當中都可以放一個Linked List。至於每個東西要放哪一格，就是由雜湊函數來決定！ 演算法 排序 + 二分搜尋法：用來加快Arry的搜尋速度 雜湊函數(不確定是否歸類在演算法) 按方法分類 先讀書培養與鍛鍊程式設計的邏輯腦-程式設計大賫的解題策略基礎入門再補上一些以下方法，就差不多夠了。&#xA;遞增法 Incremental Method 記憶法 Memoization 枚舉法 Enumerative Method 遞推法 Iterative Method 遞歸法 Recrusive Method 分治法 Divide and Conquer 動態規劃 Dynamic Programming 貪心法 Greedy Method 縮放法 Scaling Method 套用模型 Modeling </description>
    </item>
  </channel>
</rss>
