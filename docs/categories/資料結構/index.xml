<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>資料結構 on Coding Grassland</title>
    <link>http://localhost:1313/categories/%E8%B3%87%E6%96%99%E7%B5%90%E6%A7%8B/</link>
    <description>Recent content in 資料結構 on Coding Grassland</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <copyright>Hailey</copyright>
    <lastBuildDate>Tue, 27 Feb 2024 00:00:00 +0000</lastBuildDate>
    <atom:link href="http://localhost:1313/categories/%E8%B3%87%E6%96%99%E7%B5%90%E6%A7%8B/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>談談遞迴Recursion</title>
      <link>http://localhost:1313/posts/recursion/</link>
      <pubDate>Tue, 27 Feb 2024 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/posts/recursion/</guid>
      <description>目錄&#xA;科普一下 non-decreasing(非遞減)與 increasing(遞增) 是一樣的嗎？&#xA;直接上個例子：&#xA;non-decreasing(非遞減) ： 1 2 3 4 or 1 1 2 3&#xA;increasing(遞增) ：1 2 3 4&#xA;非遞減的意思是下一個元素不小於前一個元素，所以 1 2 3 4 or 1 1 2 3 都符合非遞減的條件，&#xA;但只有1 2 3 4符合遞增的條件，所以兩種排序方式是有這樣的差別的。&#xA;處理Linked-List(鏈結串列)的各種方式： Push-從尾新增節點&#xA;pop-從尾移除節點&#xA;Shift-從頭移除節點&#xA;Unshift-從頭新增節點&#xA;Insert-從中間新增節點&#xA;remove-從中間移除節點&#xA;get-取得節點資訊：類似Search&#xA;Linked List及Array 時間複雜度比較表 思考：比較下來，發現LinkedList的優勢會在從頭新增元素時，不需像Array一樣將所有索引重新計算，但整體看下來，適合用Array的應用情境會比較多，不太確定Singly-Linked-List的重要性為何，待後面有更深入了解再補上吧。 (有可能使用方式是來做其他演算法如二元樹的基礎)&#xA;參考資料&#xD;</description>
    </item>
    <item>
      <title>資料結構及演算法學習筆記</title>
      <link>http://localhost:1313/posts/algorithm/</link>
      <pubDate>Tue, 27 Feb 2024 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/posts/algorithm/</guid>
      <description>目錄&#xA;演算法是什麼&#xD;Chatgpt提供的學習計劃&#xD;演算法介紹&#xD;Two Pointer&#xD;其他待整理key word&#xD;資料結構&#xD;演算法&#xD;演算法是什麼 {待補}&#xA;Chatgpt提供的學習計劃 第一階段：建立基礎&#xD;1. 基本概念&#xD;- 學習演算法和資料結構的基本概念，例如陣列、鏈表、堆疊、佇列等。&#xD;2. 時間複雜度和空間複雜度&#xD;- 理解演算法的時間複雜度和空間複雜度，並學習如何評估演算法的效能。&#xD;3. 排序演算法&#xD;- 學習常見的排序演算法，如冒泡排序、插入排序、選擇排序、快速排序、合併排序等。&#xD;4. 搜尋演算法&#xD;- 瞭解搜尋演算法，包括線性搜尋和二分搜尋。&#xD;第二階段：擴展知識&#xD;1. 圖論&#xD;- 學習圖論相關的基本概念，如圖、路徑、迴路、最短路徑等，以及常見的圖論演算法，如深度優先搜索（DFS）和廣度優先搜索（BFS）。&#xD;2. 動態規劃&#xD;- 瞭解動態規劃的基本原理和應用場景，並學習如何設計動態規劃演算法解決問題。&#xD;3. 貪婪演算法&#xD;- 學習貪婪演算法的基本原理和常見應用，以及貪婪演算法與動態規劃的區別和適用場景。&#xD;第三階段：實際應用&#xD;1. 演算法問題練習&#xD;- 解決各種演算法問題，可以通過線上資源如 LeetCode、HackerRank、Codewars 等網站來進行練習。&#xD;2. 專案應用&#xD;- 在你的 ASP.NET Core 專案中實際應用所學的演算法知識，優化程式碼效能，處理複雜的邏輯問題。 演算法介紹 Two Pointer 其他待整理key word 資料結構 電腦區分兩種方法： 大塊：Array 小塊：Linked List 連結數量 一個連一個&amp;mdash;&amp;gt;Linked List(鏈結串列) 一個連兩個&amp;mdash;&amp;gt;Binary tree(二元樹) 一個連多個&amp;mdash;&amp;gt;B-Tree 或 B+ Tree(多元樹) 存放位置 通常存放在記憶體：Linked List、Binary tree 通常存放在硬碟：B-Tree Hash Table(雜湊表)：</description>
    </item>
    <item>
      <title>文章模板(開發用)</title>
      <link>http://localhost:1313/posts/posttemplate/</link>
      <pubDate>Mon, 26 Feb 2024 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/posts/posttemplate/</guid>
      <description>目錄&#xA;Chatgpt提供的學習計劃&#xD;H1&#xD;H2&#xD;H3&#xD;H4&#xD;H5&#xD;H6&#xD;Chatgpt提供的學習計劃 Chatgpt提供的學習計劃 H1 H2 H3 H4 H5 H6 斜體字&#xA;斜體字2&#xA;粗體字&#xA;斜體兼粗體&#xA;斜體兼粗體2&#xA;刪除線&#xA;正常上標&#xA;19^th^ 上標&#xA;H~2~O 下標&#xA;++底線++&#xA;底線&#xA;==螢光標記== 要變紅色的文字放這裡&#xA;目錄不顯示此標題 引言&#xA;第一層&#xA;第二層&#xA;第三層&#xA;另一種區塊&#xA;另一種區塊 另一種區塊 另一種區塊&#xD;清單(無序)&#xA;Red Green Blue Red Green Blue Red Green Blue 清單(有序)&#xA;Bird McHale Parish Checkbox&#xA;uncheck check 分隔線(但目前的Hugo theme顯示不出來…)&#xA;程式碼 短區塊程式碼 短區塊程式碼&#xA;連結 連結名稱&#xD;標籤連結 Google&#xD;Yahoo&#xD;MSN&#xD;圖片 游標顯示&#xD;表格</description>
    </item>
  </channel>
</rss>
